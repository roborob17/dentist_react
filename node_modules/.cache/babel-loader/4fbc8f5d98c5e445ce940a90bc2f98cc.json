{"ast":null,"code":"import data from \"../database.js\"; //getting a random time\n\nconst getRandomTime = () => {\n  let hour;\n\n  while (true) {\n    hour = Math.floor(Math.random() * 24);\n\n    if (hour > 7 && hour < 19) {\n      return hour;\n    }\n  }\n}; //getting a random day\n\n\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1; //picking a random patient from the list\n\n\nconst getRandomPatient = () => {\n  const person = data.patients[Math.floor(Math.random() * data.patients.length)];\n  return person;\n};\n\nconst getRandomDentist = () => {\n  const person = data.dentists[Math.floor(Math.random() * data.dentists.length)];\n  return person;\n};\n\nconst getRandomAssistant = () => {\n  const person = data.assistants[Math.floor(Math.random() * data.assistants.length)];\n  return person;\n};\n\nconst getRandomType = () => {\n  const types = [\"Filling\", \"Place Crown\", \"Pull\", \"Surgery\"];\n  const type = types[Math.floor(Math.random() * 4)];\n  return type;\n}; //generate x amount of appointments\n\n\nconst generateRandomAppointments = amount => {\n  const appointments = [];\n  let id = 0;\n\n  for (let i = amount; i > 0; --i) {\n    id++;\n    const appointment = {\n      id: id,\n      time: getRandomTime(),\n      day: getRandomDay(),\n      patient: getRandomPatient(),\n      dentist: getRandomDentist(),\n      assistant: getRandomAssistant(),\n      type: getRandomType()\n    };\n    appointments.push(appointment);\n  }\n\n  return appointments;\n};\n\nexport default generateRandomAppointments;","map":{"version":3,"names":["data","getRandomTime","hour","Math","floor","random","getRandomDay","getRandomPatient","person","patients","length","getRandomDentist","dentists","getRandomAssistant","assistants","getRandomType","types","type","generateRandomAppointments","amount","appointments","id","i","appointment","time","day","patient","dentist","assistant","push"],"sources":["C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/src/functions/generateRandomAppointments.js"],"sourcesContent":["import data from \"../database.js\";\r\n\r\n//getting a random time\r\nconst getRandomTime = () => {\r\n    let hour;\r\n    while (true) {\r\n        hour = Math.floor(Math.random() * 24);\r\n        if (hour > 7 && hour < 19) {\r\n            return hour;\r\n    }\r\n    }\r\n};\r\n\r\n//getting a random day\r\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1;\r\n\r\n//picking a random patient from the list\r\nconst getRandomPatient = () => {\r\n    const person = data.patients[Math.floor(Math.random() * data.patients.length)]\r\n    return person\r\n}\r\n\r\nconst getRandomDentist = () => {\r\n    const person = data.dentists[Math.floor(Math.random() * data.dentists.length)]\r\n    return person\r\n}\r\n\r\nconst getRandomAssistant = () => {\r\n    const person = data.assistants[Math.floor(Math.random() * data.assistants.length)]\r\n    return person\r\n}\r\n\r\nconst getRandomType = () => {\r\n    const types = [\"Filling\", \"Place Crown\", \"Pull\", \"Surgery\"]\r\n    const type = types[Math.floor(Math.random() * 4)]\r\n    return type\r\n\r\n}\r\n\r\n//generate x amount of appointments\r\nconst generateRandomAppointments = amount => {\r\n    const appointments = [];\r\n    let id = 0\r\n    for (let i = amount; i > 0; --i){\r\n        id++\r\n        const appointment = {\r\n            id: id,\r\n            time: getRandomTime(),\r\n            day: getRandomDay(),\r\n            patient: getRandomPatient(),\r\n            dentist: getRandomDentist(),\r\n            assistant: getRandomAssistant(),\r\n            type: getRandomType ()\r\n        }\r\n        appointments.push(appointment)\r\n    }\r\n    return appointments\r\n}\r\nexport default generateRandomAppointments"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,gBAAjB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,MAAM;EACxB,IAAIC,IAAJ;;EACA,OAAO,IAAP,EAAa;IACTA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAP;;IACA,IAAIH,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EAA2B;MACvB,OAAOA,IAAP;IACP;EACA;AACJ,CARD,C,CAUA;;;AACA,MAAMI,YAAY,GAAG,MAAMH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA5D,C,CAEA;;;AACA,MAAME,gBAAgB,GAAG,MAAM;EAC3B,MAAMC,MAAM,GAAGR,IAAI,CAACS,QAAL,CAAcN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,IAAI,CAACS,QAAL,CAAcC,MAAzC,CAAd,CAAf;EACA,OAAOF,MAAP;AACH,CAHD;;AAKA,MAAMG,gBAAgB,GAAG,MAAM;EAC3B,MAAMH,MAAM,GAAGR,IAAI,CAACY,QAAL,CAAcT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,IAAI,CAACY,QAAL,CAAcF,MAAzC,CAAd,CAAf;EACA,OAAOF,MAAP;AACH,CAHD;;AAKA,MAAMK,kBAAkB,GAAG,MAAM;EAC7B,MAAML,MAAM,GAAGR,IAAI,CAACc,UAAL,CAAgBX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,IAAI,CAACc,UAAL,CAAgBJ,MAA3C,CAAhB,CAAf;EACA,OAAOF,MAAP;AACH,CAHD;;AAKA,MAAMO,aAAa,GAAG,MAAM;EACxB,MAAMC,KAAK,GAAG,CAAC,SAAD,EAAY,aAAZ,EAA2B,MAA3B,EAAmC,SAAnC,CAAd;EACA,MAAMC,IAAI,GAAGD,KAAK,CAACb,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAlB;EACA,OAAOY,IAAP;AAEH,CALD,C,CAOA;;;AACA,MAAMC,0BAA0B,GAAGC,MAAM,IAAI;EACzC,MAAMC,YAAY,GAAG,EAArB;EACA,IAAIC,EAAE,GAAG,CAAT;;EACA,KAAK,IAAIC,CAAC,GAAGH,MAAb,EAAqBG,CAAC,GAAG,CAAzB,EAA4B,EAAEA,CAA9B,EAAgC;IAC5BD,EAAE;IACF,MAAME,WAAW,GAAG;MAChBF,EAAE,EAAEA,EADY;MAEhBG,IAAI,EAAEvB,aAAa,EAFH;MAGhBwB,GAAG,EAAEnB,YAAY,EAHD;MAIhBoB,OAAO,EAAEnB,gBAAgB,EAJT;MAKhBoB,OAAO,EAAEhB,gBAAgB,EALT;MAMhBiB,SAAS,EAAEf,kBAAkB,EANb;MAOhBI,IAAI,EAAEF,aAAa;IAPH,CAApB;IASAK,YAAY,CAACS,IAAb,CAAkBN,WAAlB;EACH;;EACD,OAAOH,YAAP;AACH,CAjBD;;AAkBA,eAAeF,0BAAf"},"metadata":{},"sourceType":"module"}