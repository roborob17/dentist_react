{"ast":null,"code":"import _classCallCheck from\"C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from\"react\";import NewIllnessOption from'./NewIllnessOption';var NewIllness=/*#__PURE__*/function(_React$Component){_inherits(NewIllness,_React$Component);var _super=_createSuper(NewIllness);function NewIllness(props){var _this;_classCallCheck(this,NewIllness);_this=_super.call(this,props);_this.handleChange=function(event){var selected=_this.props.data[event.target.value];_this.setState({selected:selected});};_this.handleSubmit=function(event){event.preventDefault();//get the type and person id from the form\nvar type=event.target.type.value;var id=parseInt(event.target.id.value);//for dentists, just change the isIll boolean and pass back to App\nif(type===\"dentists\"){var newList=_this.state.selected;newList[id].isIll=true;_this.props.makeDentistSick(newList);}//for patients, get the array of appointments and\nelse{var appointments=_this.state.appointments.filter(function(app){return app.patient.id!==id;});_this.props.makePatientSick(appointments);}event.target.reset();};_this.state={selector:\"Please select a type of person\",selected:[],appointments:props.data.appointments};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));return _this;}//updating changes made in the form\n_createClass(NewIllness,[{key:\"render\",value:function render(){var getOptions=this.state.selected.map(function(person){return/*#__PURE__*/React.createElement(NewIllnessOption,Object.assign({},person,{key:person.id}));});return/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.handleSubmit},/*#__PURE__*/React.createElement(\"h1\",null,\"Mark for illness\"),/*#__PURE__*/React.createElement(\"select\",{name:\"type\",onChange:this.handleChange,defaultValue:\"\",required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\",disabled:true},this.state.selector),/*#__PURE__*/React.createElement(\"option\",{value:\"patients\"},\"Patient\"),/*#__PURE__*/React.createElement(\"option\",{value:\"dentists\"},\"Dentist\")),/*#__PURE__*/React.createElement(\"select\",{name:\"id\",defaultValue:\"\",required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\",disabled:true},\"Select a Person\"),getOptions),/*#__PURE__*/React.createElement(\"input\",{className:\"submit\",type:\"submit\",value:\"Mark as ill\"}));}}]);return NewIllness;}(React.Component);export default NewIllness;","map":{"version":3,"names":["React","NewIllnessOption","NewIllness","props","handleChange","event","selected","data","target","value","setState","handleSubmit","preventDefault","type","id","parseInt","newList","state","isIll","makeDentistSick","appointments","filter","app","patient","makePatientSick","reset","selector","bind","getOptions","map","person","Component"],"sources":["C:/Users/Gebruiker/Documents/GitHub/WINCacademy/dentist_react/src/components/forms/NewIllness.js"],"sourcesContent":["import React from \"react\";\r\nimport NewIllnessOption from './NewIllnessOption'\r\n\r\nclass NewIllness extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selector: \"Please select a type of person\",\r\n            selected: [],\r\n            appointments: props.data.appointments\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    //updating changes made in the form\r\n    handleChange = (event) => { \r\n        const selected = this.props.data[event.target.value]\r\n        this.setState ({\r\n            selected\r\n        })\r\n    }\r\n\r\n    //Handling submit event to mark as ill\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        //get the type and person id from the form\r\n        const type = event.target.type.value\r\n        const id = parseInt(event.target.id.value)\r\n\r\n        //for dentists, just change the isIll boolean and pass back to App\r\n        if (type === \"dentists\") {\r\n            const newList = this.state.selected;\r\n            newList[id].isIll = true;\r\n            this.props.makeDentistSick(newList);\r\n        }\r\n\r\n        //for patients, get the array of appointments and\r\n        else {   \r\n            const appointments = this.state.appointments.filter(app => {\r\n                return app.patient.id !== id\r\n            })\r\n            this.props.makePatientSick(appointments)\r\n        }\r\n        event.target.reset();\r\n    }\r\n\r\n    render(){\r\n        const getOptions = \r\n                this.state.selected.map(person => {\r\n                    return <NewIllnessOption {...person} key={person.id}/>\r\n                    \r\n            })\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <h1>Mark for illness</h1>\r\n                <select name=\"type\" onChange={this.handleChange} defaultValue=\"\" required>\r\n                    <option value=\"\" disabled>{this.state.selector}</option>\r\n                    <option value=\"patients\">Patient</option>\r\n                    <option value=\"dentists\">Dentist</option>\r\n                </select>\r\n                <select name=\"id\" defaultValue=\"\" required >\r\n                    <option value=\"\" disabled>Select a Person</option>\r\n                    {getOptions}\r\n                </select>\r\n                <input className=\"submit\" type=\"submit\" value=\"Mark as ill\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default NewIllness"],"mappings":"+tBAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,iBAAP,KAA6B,oBAA7B,C,GAEMC,W,oHACF,oBAAYC,KAAZ,CAAmB,4CACf,uBAAMA,KAAN,EADe,MAWnBC,YAXmB,CAWJ,SAACC,KAAD,CAAW,CACtB,GAAMC,SAAQ,CAAG,MAAKH,KAAL,CAAWI,IAAX,CAAgBF,KAAK,CAACG,MAAN,CAAaC,KAA7B,CAAjB,CACA,MAAKC,QAAL,CAAe,CACXJ,QAAQ,CAARA,QADW,CAAf,EAGH,CAhBkB,OAmBnBK,YAnBmB,CAmBJ,SAACN,KAAD,CAAW,CACtBA,KAAK,CAACO,cAAN,GAEA;AACA,GAAMC,KAAI,CAAGR,KAAK,CAACG,MAAN,CAAaK,IAAb,CAAkBJ,KAA/B,CACA,GAAMK,GAAE,CAAGC,QAAQ,CAACV,KAAK,CAACG,MAAN,CAAaM,EAAb,CAAgBL,KAAjB,CAAnB,CAEA;AACA,GAAII,IAAI,GAAK,UAAb,CAAyB,CACrB,GAAMG,QAAO,CAAG,MAAKC,KAAL,CAAWX,QAA3B,CACAU,OAAO,CAACF,EAAD,CAAP,CAAYI,KAAZ,CAAoB,IAApB,CACA,MAAKf,KAAL,CAAWgB,eAAX,CAA2BH,OAA3B,EACH,CAED;AANA,IAOK,CACD,GAAMI,aAAY,CAAG,MAAKH,KAAL,CAAWG,YAAX,CAAwBC,MAAxB,CAA+B,SAAAC,GAAG,CAAI,CACvD,MAAOA,IAAG,CAACC,OAAJ,CAAYT,EAAZ,GAAmBA,EAA1B,CACH,CAFoB,CAArB,CAGA,MAAKX,KAAL,CAAWqB,eAAX,CAA2BJ,YAA3B,EACH,CACDf,KAAK,CAACG,MAAN,CAAaiB,KAAb,GACH,CAzCkB,CAEf,MAAKR,KAAL,CAAa,CACTS,QAAQ,CAAE,gCADD,CAETpB,QAAQ,CAAE,EAFD,CAGTc,YAAY,CAAEjB,KAAK,CAACI,IAAN,CAAWa,YAHhB,CAAb,CAKA,MAAKhB,YAAL,CAAoB,MAAKA,YAAL,CAAkBuB,IAAlB,+BAApB,CAPe,aAQlB,CAED;6CAiCA,iBAAQ,CACJ,GAAMC,WAAU,CACR,KAAKX,KAAL,CAAWX,QAAX,CAAoBuB,GAApB,CAAwB,SAAAC,MAAM,CAAI,CAC9B,mBAAO,oBAAC,gBAAD,kBAAsBA,MAAtB,EAA8B,GAAG,CAAEA,MAAM,CAAChB,EAA1C,GAAP,CAEP,CAHG,CADR,CAKA,mBACI,4BAAM,QAAQ,CAAE,KAAKH,YAArB,eACI,iDADJ,cAEI,8BAAQ,IAAI,CAAC,MAAb,CAAoB,QAAQ,CAAE,KAAKP,YAAnC,CAAiD,YAAY,CAAC,EAA9D,CAAiE,QAAQ,KAAzE,eACI,8BAAQ,KAAK,CAAC,EAAd,CAAiB,QAAQ,KAAzB,EAA2B,KAAKa,KAAL,CAAWS,QAAtC,CADJ,cAEI,8BAAQ,KAAK,CAAC,UAAd,YAFJ,cAGI,8BAAQ,KAAK,CAAC,UAAd,YAHJ,CAFJ,cAOI,8BAAQ,IAAI,CAAC,IAAb,CAAkB,YAAY,CAAC,EAA/B,CAAkC,QAAQ,KAA1C,eACI,8BAAQ,KAAK,CAAC,EAAd,CAAiB,QAAQ,KAAzB,oBADJ,CAEKE,UAFL,CAPJ,cAWI,6BAAO,SAAS,CAAC,QAAjB,CAA0B,IAAI,CAAC,QAA/B,CAAwC,KAAK,CAAC,aAA9C,EAXJ,CADJ,CAeH,C,wBAjEoB5B,KAAK,CAAC+B,S,EAmE/B,cAAe7B,WAAf"},"metadata":{},"sourceType":"module"}